#include "ofxDaqPhidgetSpatialStream.h"

//--------------------------------------------------------------
ofxDaqPhidgetSpatialStream::ofxDaqPhidgetSpatialStream(){
    fifo = new CircularFifo(256,512);
    blockSize = 256;
    N = 512;
    startTime = ofGetElapsedTimef();
    dataRate = 0;
    writer = new ofxDaqWriter("TESTDATA","TEST","bin");
    dataBlock = (char*)malloc(blockSize);
    deviceError = false;
    spatialSampleRate = 10;
}


//--------------------------------------------------------------
ofxDaqPhidgetSpatialStream::ofxDaqPhidgetSpatialStream(int blockSize_, int N_){
    fifo = new CircularFifo(blockSize_,N_);
    blockSize = blockSize_;
    N = N_;
    startTime = ofGetElapsedTimef();
    dataRate = 0;
    writer = new ofxDaqWriter("TESTDATA","TEST","bin");
    dataBlock = (char*)malloc(blockSize);
    deviceError = false;
    spatialSampleRate = 10;
}

//--------------------------------------------------------------
ofxDaqPhidgetSpatialStream::ofxDaqPhidgetSpatialStream(int blockSize_, int N_, string filePrefix){
    fifo = new CircularFifo(blockSize_,N_);
    blockSize = blockSize_;
    N = N_;
    startTime = ofGetElapsedTimef();
    dataRate = 0;
    writer = new ofxDaqWriter(filePrefix,"TEST","bin");
    dataBlock = (char*)malloc(blockSize);
    deviceError = false;
    spatialSampleRate = 10;
}

ofxDaqPhidgetSpatialStream::~ofxDaqPhidgetSpatialStream() {
    this->stop();
    delete fifo;
    writer->stop();
    delete writer;
    free(dataBlock);
}

//-------------------------------------------------------------
void ofxDaqPhidgetSpatialStream::threadedFunction() {

    char * data;
    float tmp = 0;
    int count = 0;

    // Preallocate data buffer    
    data = (char*)malloc(blockSize);
    
    // Conitune while the thread is running
    while(isThreadRunning()) {
        // Write data and sleep
        for (unsigned int i=0;i<blockSize;i++) {
            *(data + i) = (char)i;
        }
        fifo->writeBlock(data,blockSize);              
        ofSleepMillis(500);
        if (count < 10) {
            tmp += ((float)blockSize)/((float)ofGetElapsedTimef()-startTime)/1e6;
            count++;
        } else {
            dataRate = tmp/count;
            tmp = 0;
            count = 0;
        }
        startTime = (float)ofGetElapsedTimef();
    }
    free(data);
}

//-------------------------------------------------------------
bool ofxDaqPhidgetSpatialStream::start(int elapsedTime){
    //this->startThread(true,false);
    
    // Phidgets Spatial uses and defines its own threads so
    // We don't need to start a thread.

    // Initialize which reads the device info and then
    // opens
    int result = this->initialize();
    
    if (result){
        cout << "Error Initializing Phidget" << endl;
        deviceError = true;
        return false;
    }

    return writer->start(elapsedTime);
}

//-------------------------------------------------------------
bool ofxDaqPhidgetSpatialStream::stop(){
    //this->stopThread(true);
    
    // Close the device
	printf("Closing...\n");
	CPhidget_close((CPhidgetHandle)spatial);
	CPhidget_delete((CPhidgetHandle)spatial);

    return writer->stop();
}

//-------------------------------------------------------------
bool ofxDaqPhidgetSpatialStream::writeData(){
    if (dataReady() && fifo->readBlock(dataBlock,blockSize)){  
        return writer->writeData(dataBlock,blockSize);
    } else {
        return false;
    }
}

//-------------------------------------------------------------
bool ofxDaqPhidgetSpatialStream::update(int startTime, bool newFile){

    // Only update when device is good    
    if (!deviceError){
        this->writeData();
        if (newFile){
            if (!this->nextFile(startTime)){
                cout << "ERROR opening file" << endl;
                return false;
            }
    
        }
        return true;
    }
    return false;
}

//-------------------------------------------------------------  
bool ofxDaqPhidgetSpatialStream::nextFile(int elapsedTime){
    return writer->nextFile(elapsedTime);
}

//-------------------------------------------------------------
bool ofxDaqPhidgetSpatialStream::dataValid(char  * dataIn,int bufferSize) {
    for(int i = 0;i < bufferSize; i++) {
        if (*(dataIn + i) != (char)i) { 
            return false;
        }    
    }
    return true;
}    

//-------------------------------------------------------------
bool ofxDaqPhidgetSpatialStream::dataReady() {
    return !fifo->isEmpty();
}

//-------------------------------------------------------------
float ofxDaqPhidgetSpatialStream::percentBufferFree() {
    return 100.0*(N - fifo->blocksUsed() + 0.0)/N;
}

//-------------------------------------------------------------
float ofxDaqPhidgetSpatialStream::getDataRate() {
    return dataRate;
}

//callback that will run if the Spatial is attached to the computer
int AttachHandler(CPhidgetHandle spatial, void *userptr)
{
	int serialNo;
	CPhidget_getSerialNumber(spatial, &serialNo);
	printf("Spatial %10d attached!", serialNo);

	return 0;
}

//callback that will run if the Spatial is detached from the computer
int DetachHandler(CPhidgetHandle spatial, void *userptr)
{
	int serialNo;
	CPhidget_getSerialNumber(spatial, &serialNo);
	printf("Spatial %10d detached! \n", serialNo);

	return 0;
}

//callback that will run if the Spatial generates an error
int ErrorHandler(CPhidgetHandle spatial, void *userptr, int ErrorCode, const char *unknown)
{
	printf("Error handled. %d - %s \n", ErrorCode, unknown);
	return 0;
}

//callback that will run at datarate
//data - array of spatial event data structures that holds the spatial data packets that were sent in this event
//count - the number of spatial data event packets included in this event
int SpatialDataHandler(CPhidgetSpatialHandle spatial, void *userptr, CPhidgetSpatial_SpatialEventDataHandle *data, int count)
{
	int i;
	printf("Number of Data Packets in this event: %d\n", count);
	for(i = 0; i < count; i++)
	{
		printf("=== Data Set: %d ===\n", i);
		printf("Acceleration> x: %6f  y: %6f  x: %6f\n", data[i]->acceleration[0], data[i]->acceleration[1], data[i]->acceleration[2]);
		printf("Angular Rate> x: %6f  y: %6f  x: %6f\n", data[i]->angularRate[0], data[i]->angularRate[1], data[i]->angularRate[2]);
		printf("Magnetic Field> x: %6f  y: %6f  x: %6f\n", data[i]->magneticField[0], data[i]->magneticField[1], data[i]->magneticField[2]);
		printf("Timestamp> seconds: %d -- microseconds: %d\n", data[i]->timestamp.seconds, data[i]->timestamp.microseconds);
	}

	printf("---------------------------------------------\n");

	return 0;
}

//Display the properties of the attached phidget to the screen.  
//We will be displaying the name, serial number, version of the attached device, the number of accelerometer, gyro, and compass Axes, and the current data rate
// of the attached Spatial.
int ofxDaqPhidgetSpatialStream::display_properties(CPhidgetHandle phid)
{
	int serialNo, version;
	const char* ptr;
	int numAccelAxes, numGyroAxes, numCompassAxes, dataRateMax, dataRateMin;

	CPhidget_getDeviceType(phid, &ptr);
	CPhidget_getSerialNumber(phid, &serialNo);
	CPhidget_getDeviceVersion(phid, &version);
	CPhidgetSpatial_getAccelerationAxisCount((CPhidgetSpatialHandle)phid, &numAccelAxes);
	CPhidgetSpatial_getGyroAxisCount((CPhidgetSpatialHandle)phid, &numGyroAxes);
	CPhidgetSpatial_getCompassAxisCount((CPhidgetSpatialHandle)phid, &numCompassAxes);
	CPhidgetSpatial_getDataRateMax((CPhidgetSpatialHandle)phid, &dataRateMax);
	CPhidgetSpatial_getDataRateMin((CPhidgetSpatialHandle)phid, &dataRateMin);

	

	printf("%s\n", ptr);
	printf("Serial Number: %10d\nVersion: %8d\n", serialNo, version);
	printf("Number of Accel Axes: %i\n", numAccelAxes);
	printf("Number of Gyro Axes: %i\n", numGyroAxes);
	printf("Number of Compass Axes: %i\n", numCompassAxes);
	printf("datarate> Max: %d  Min: %d\n", dataRateMax, dataRateMin);

	return 0;
}

int ofxDaqPhidgetSpatialStream::initialize()
{
	int result;
	const char *err;

    spatial = 0;

	//create the spatial object
	CPhidgetSpatial_create(&spatial);

	//Set the handlers to be run when the device is plugged in or opened from software, unplugged or closed from software, or generates an error.
	CPhidget_set_OnAttach_Handler((CPhidgetHandle)spatial, AttachHandler, NULL);
	CPhidget_set_OnDetach_Handler((CPhidgetHandle)spatial, DetachHandler, NULL);
	CPhidget_set_OnError_Handler((CPhidgetHandle)spatial, ErrorHandler, NULL);

	//Registers a callback that will run according to the set data rate that will return the spatial data changes
	//Requires the handle for the Spatial, the callback handler function that will be called, 
	//and an arbitrary pointer that will be supplied to the callback function (may be NULL)
	CPhidgetSpatial_set_OnSpatialData_Handler(spatial, SpatialDataHandler, NULL);

	//open the spatial object for device connections
	CPhidget_open((CPhidgetHandle)spatial, -1);

	//get the program to wait for a spatial device to be attached
	printf("Waiting for spatial to be attached.... \n");
	if((result = CPhidget_waitForAttachment((CPhidgetHandle)spatial, 10000)))
	{
		CPhidget_getErrorDescription(result, &err);
		printf("Problem waiting for attachment: %s\n", err);
		return 1;
	}

	//Display the properties of the attached spatial device
	display_properties((CPhidgetHandle)spatial);

	//read spatial event data
	printf("Reading.....\n");
	
	//Set the data rate for the spatial events
	CPhidgetSpatial_setDataRate(spatial, spatialSampleRate);

	return 0;
}

