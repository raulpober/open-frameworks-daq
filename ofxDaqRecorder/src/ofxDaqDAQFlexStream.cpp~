#include "ofxDaqDAQFlexStream.h"

//--------------------------------------------------------------
ofxDaqDAQFlexStream::ofxDaqDAQFlexStream(){
    fifo = new CircularFifo(256,512);
    blockSize = 256;
    N = 512;
    startTime = ofGetElapsedTimef();
    dataRate = 0;
    writer = new ofxDaqWriter("TESTDATA","TEST","bin");
    dataBlock = (char*)malloc(blockSize);
}


//--------------------------------------------------------------
ofxDaqDAQFlexStream::ofxDaqDAQFlexStream(int blockSize_, int N_){
    fifo = new CircularFifo(blockSize_,N_);
    blockSize = blockSize_;
    N = N_;
    startTime = ofGetElapsedTimef();
    dataRate = 0;
    writer = new ofxDaqWriter("TESTDATA","TEST","bin");
    dataBlock = (char*)malloc(blockSize);
}

//--------------------------------------------------------------
ofxDaqDAQFlexStream::ofxDaqDAQFlexStream(int blockSize_, int N_, string filePrefix){
    fifo = new CircularFifo(blockSize_,N_);
    blockSize = blockSize_;
    N = N_;
    startTime = ofGetElapsedTimef();
    dataRate = 0;
    writer = new ofxDaqWriter(filePrefix,"TEST","bin");
    dataBlock = (char*)malloc(blockSize);
}

ofxDaqDAQFlexStream::~ofxDaqDAQFlexStream() {
    delete fifo;
    writer->stop();
    delete writer;
    free(dataBlock);
}

//-------------------------------------------------------------
void ofxDaqDAQFlexStream::threadedFunction() {

    char * data;
    float tmp = 0;
    int count = 0;

    // Preallocate data buffer    
    data = (char*)malloc(blockSize);
    
    // Conitune while the thread is running
    while(isThreadRunning()) {
        // Write data and sleep
        for (unsigned int i=0;i<blockSize;i++) {
            *(data + i) = (char)i;
        }
        fifo->writeBlock(data,blockSize);              
        ofSleepMillis(500);
        if (count < 10) {
            tmp += ((float)blockSize)/((float)ofGetElapsedTimef()-startTime)/1e6;
            count++;
        } else {
            dataRate = tmp/count;
            tmp = 0;
            count = 0;
        }
        startTime = (float)ofGetElapsedTimef();
    }
    free(data);
}

//-------------------------------------------------------------
bool ofxDaqDAQFlexStream::start(int elapsedTime){
    this->startThread(true,false);
    return writer->start(elapsedTime);
}

//-------------------------------------------------------------
bool ofxDaqDAQFlexStream::stop(){
    this->stopThread(true);
    return writer->stop();
}

//-------------------------------------------------------------
bool ofxDaqDAQFlexStream::writeData(){
    if (dataReady() && fifo->readBlock(dataBlock,blockSize)){  
        return writer->writeData(dataBlock,blockSize);
    } else {
        return false;
    }
}

//-------------------------------------------------------------
bool ofxDaqDAQFlexStream::update(int startTime, bool newFile){
    this->writeData();
    if (newFile){
        if (!this->nextFile(startTime)){
            cout << "ERROR opening file" << endl;
            return false;
        }
    
    }
    return true;
}

//-------------------------------------------------------------  
bool ofxDaqDAQFlexStream::nextFile(int elapsedTime){
    return writer->nextFile(elapsedTime);
}

//-------------------------------------------------------------
bool ofxDaqDAQFlexStream::dataValid(char  * dataIn,int bufferSize) {
    for(int i = 0;i < bufferSize; i++) {
        if (*(dataIn + i) != (char)i) { 
            return false;
        }    
    }
    return true;
}    

//-------------------------------------------------------------
bool ofxDaqDAQFlexStream::dataReady() {
    return !fifo->isEmpty();
}

//-------------------------------------------------------------
float ofxDaqDAQFlexStream::percentBufferFree() {
    return 100.0*(N - fifo->blocksUsed() + 0.0)/N;
}

//-------------------------------------------------------------
float ofxDaqDAQFlexStream::getDataRate() {
    return dataRate;
}

